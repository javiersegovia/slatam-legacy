version: "2.4"

services:
  web:
    build:
      context: ./web
      target: dev
    networks:
      - proxy
      - client
    volumes:
      - ./web:/slatam/web
      - /slatam/web/node_modules
      - /slatam/web/.next
    env_file: .env
    command: next
    environment:
      - NODE_ENV=development
      - PORT=3000
    # TODO: add healthcheck test
    # healtcheck:
    #   test:
    labels:
      traefik.enable: true
      traefik.docker.network: proxy
      traefik.http.routers.web.rule: Host(`vcap.me`)
      # this will open service to :80, 'web' here is the entrypoint, not the service name
      traefik.http.routers.web.entryPoints: web
      traefik.http.routers.web.service: web
      traefik.http.services.web.loadbalancer.server.port: 3000
    # depends_on:
    #   traefik:

  api:
    build:
      context: ./api
      target: dev
    networks:
      - proxy
      - server
    volumes:
      - ./api:/slatam/api
      - /slatam/api/node_modules
    env_file: .env
    command: bash -c "nodemon server.js"
    environment:
      - NODE_ENV=development
      - DISABLE_LOGGING=true
      - PORT=4000
    depends_on:
      # traefik:
      db:
        condition: service_healthy
    labels:
      traefik.enable: true
      traefik.docker.network: proxy
      traefik.http.routers.api.rule: Host(`api.vcap.me`)
      # this will open service to :80, 'web' here is the entrypoint, not the service name
      traefik.http.routers.api.entryPoints: web
      traefik.http.routers.api.service: api
      traefik.http.services.api.loadbalancer.server.port: 4000
      traefik.http.services.api.loadbalancer.sticky: true

  traefik:
    image: traefik:2.2
    networks:
      - proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "80:80"
    command:
      # Use your favourite settings here, but add:
      - --providers.docker
      - --providers.docker.network=proxy
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedByDefault=false
      - --api
      - --api.debug=true
      - --api.dashboard=true
      - --api.insecure=true
      - --entryPoints.web.address=:80
      # - --entryPoints.websecure.address=:443
      # - --entrypoints.websecure.http.tls=true
      # - --entrypoints.web.http.redirections.entryPoint.to=websecure # force HTTPS
      # - --entrypoints.web.http.tls.certresolver=default
      ## optional LetsEncrypt settings
      # - --certificatesResolvers.default.acme.email=${TRAEFIK_ACME_EMAIL}
      # - --certificatesResolvers.default.acme.storage=/etc/traefik/acme/acme.json
      # - --certificatesResolvers.default.acme.tlsChallenge=true
      # - --certificatesResolvers.default.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      # - --certificatesResolvers.default.acme.caServer=https://acme-v02.api.letsencrypt.org/directory
    # healthcheck:
    #   test: traefik healthcheck --ping
    labels:
      traefik.enable: true
      traefik.docker.network: proxy
      traefik.http.routers.traefik.rule: Host(`traefik.vcap.me`)
      traefik.http.routers.traefik.entryPoints: web
      traefik.http.routers.traefik.service: api@internal
      traefik.http.services.traefik.loadbalancer.server.port: 8080

  db:
    image: postgres:12.2
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER}
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - server

volumes:
  db-data:

networks:
  client:
  server:
  proxy:
    name: proxy
