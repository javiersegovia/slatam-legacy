version: "3.7"

x-default-opts: &default-opts
  logging:
    options:
      max-size: "1m"

services:
  web:
    <<: *default-opts
    image: slatamweb:prod
    networks:
      - proxy
      - client
    volumes:
      - ./web:/slatam/web
      - /slatam/web/node_modules
      - /slatam/web/.next
    env_file: .env
    command: bash -c "../node_modules/.bin/next start"
    environment:
      - NODE_ENV=development
      - PORT=3000
    deploy:
      mode: replicated
      replicas: 1
      labels:
        traefik.enable: "true"
        traefik.docker.network: proxy
        traefik.http.routers.web.rule: Host(`www.slatam.com`) || Host(`slatam.com`)
        # this will open service to :80, 'web' here is the entrypoint, not the service name
        traefik.http.routers.web.entryPoints: web
        traefik.http.routers.web.service: web
        traefik.http.services.web.loadbalancer.server.port: 3000

  api:
    <<: *default-opts
    image: slatamapi:prod
    networks:
      - proxy
      - server
    volumes:
      - ./api:/slatam/api
      - /slatam/api/node_modules
    env_file: .env
    command: bash -c "node server.js"
    environment:
      - NODE_ENV=development
      - DISABLE_LOGGING=true
      - PORT=4000
    deploy:
      mode: replicated
      replicas: 1
      labels:
        traefik.enable: "true"
        traefik.docker.network: proxy
        traefik.http.routers.api.rule: Host(`api.slatam.com`)
        # this will open service to :80, 'web' here is the entrypoint, not the service name
        traefik.http.routers.api.entryPoints: web
        traefik.http.routers.api.service: api
        traefik.http.services.api.loadbalancer.server.port: 4000
        traefik.http.services.api.loadbalancer.sticky: "true"

  traefik:
    <<: *default-opts
    image: traefik:2.2
    networks:
      - proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 80:80
      - 443:443
    command:
      - --providers.docker
      - --providers.docker.network=proxy
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedByDefault=false
      - --providers.docker.watch
      - --providers.docker.swarmMode=true
      - --api
      - --api.debug=true
      - --api.dashboard=true
      - --api.insecure=true
      - --entryPoints.web.address=:80
      - --entryPoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
      # - --entrypoints.web.http.redirections.entryPoint.to=websecure # force HTTPS
      # - --entrypoints.web.http.tls.certresolver=default
      ## optional LetsEncrypt settings
      # - --certificatesResolvers.default.acme.email=${TRAEFIK_ACME_EMAIL}
      # - --certificatesResolvers.default.acme.storage=/etc/traefik/acme/acme.json
      # - --certificatesResolvers.default.acme.tlsChallenge=true
      # - --certificatesResolvers.default.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      # - --certificatesResolvers.default.acme.caServer=https://acme-v02.api.letsencrypt.org/directory
    deploy:
      mode: replicated
      replicas: 1
      labels:
        traefik.enable: "true"
        traefik.docker.network: proxy
        traefik.http.routers.traefik.rule: Host(`traefik.slatam.com`)
        traefik.http.routers.traefik.entryPoints: web
        traefik.http.routers.traefik.service: api@internal
        traefik.http.services.traefik.loadbalancer.server.port: 8080
        # traefik.http.routers.traefik.middlewares: auth
        # traefik.http.middlewares.auth.basicauth.users: ${TRAEFIK_USER}:${TRAEFIK_HASHED_PASSWORD}

  db:
    <<: *default-opts
    image: postgres:12.2
    networks:
      - server
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    # healthcheck:
    #   test: pg_isready -h 127.0.0.1
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

  portainer:
    <<: *default-opts
    image: portainer/portainer
    networks:
      - proxy
    volumes:
      - portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      mode: replicated
      replicas: 1
      placement:
        # place on managers when not using agent, place on workers if using agent
        constraints: [node.role == manager]
      labels:
        traefik.enable: "true"
        traefik.docker.network: proxy
        traefik.http.routers.portainer.rule: Host(`portainer.slatam.com`)
        traefik.http.routers.portainer.entryPoints: web
        traefik.http.routers.portainer.service: portainer
        traefik.http.services.portainer.loadbalancer.server.port: 9000

#   plugin-rexray:
#     <<: *default-opts
#     image: mavenugo/swarm-exec:17.03.0-ce
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock
#     secrets:
#       - rexray_do_token
#     environment:
#       - REXRAY_DO_TOKEN_FILE=/run/secrets/rexray_do_token
#     command: sh -c "docker plugin install --grant-all-permissions rexray/dobs DOBS_REGION=nyc3 DOBS_TOKEN=$$(cat $$REXRAY_DO_TOKEN_FILE) DOBS_CONVERTUNDERSCORES=true"
#     deploy:
#       mode: global
#       restart_policy:
#         condition: none

# secrets:
#   rexray_do_token:
#     external: true
#     name: rexray_do_token

volumes:
  db-data:
  portainer:

networks:
  client:
  server:
  proxy:
    name: proxy
