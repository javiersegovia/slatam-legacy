version: "3.7"

x-default-opts: &default-opts
  logging:
    options:
      max-size: "1m"

services:
  web:
    <<: *default-opts
    image: ${DOCKER_IMAGE_REPO}:web_prod_${COMMIT_ID}
    networks:
      - proxy
      - client
    volumes:
      - ./web:/slatam/web
      - /slatam/web/node_modules
      - /slatam/web/.next
    env_file: .env
    command: bash -c "../node_modules/.bin/next start"
    environment:
      - NODE_ENV=production
      - PORT=3000
    deploy:
      mode: replicated
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.docker.network=proxy

        - traefik.http.routers.web-http.rule=Host(`www.slatam.com`) || Host(`slatam.com`)
        - traefik.http.routers.web-http.entrypoints=http

        - traefik.http.routers.web-http.middlewares=https-redirect

        - traefik.http.routers.web-https.rule=Host(`www.slatam.com`) || Host(`slatam.com`)
        - traefik.http.routers.web-https.entrypoints=https

        - traefik.http.routers.web-https.tls=true
        - traefik.http.routers.web-https.tls.certresolver=le

        - traefik.http.services.web-https-service.loadbalancer.server.port=3000

  api:
    <<: *default-opts
    image: ${DOCKER_IMAGE_REPO}:api_prod_${COMMIT_ID}
    networks:
      - proxy
      - server
    volumes:
      - ./api:/slatam/api
      - /slatam/api/node_modules
      - /slatam/api/dist
    env_file: .env
    command: bash -c "node server.js"
    environment:
      - NODE_ENV=production
      - DISABLE_LOGGING=true
      - PORT=4000
    deploy:
      mode: replicated
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.docker.network=proxy

        - traefik.http.routers.api-http.rule=Host(`api.slatam.com`)
        - traefik.http.routers.api-http.entrypoints=http

        - traefik.http.routers.api-http.middlewares=https-redirect

        - traefik.http.routers.api-https.rule=Host(`api.slatam.com`)
        - traefik.http.routers.api-https.entrypoints=https

        - traefik.http.routers.api-https.tls=true
        - traefik.http.routers.api-https.tls.certresolver=le

        - traefik.http.services.api-https-service.loadbalancer.server.port=4000
        - traefik.http.services.api-https-service.loadbalancer.sticky=true

  traefik:
    <<: *default-opts
    image: traefik:2.2
    networks:
      - proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - acme:/certificates
    ports:
      - 80:80
      - 443:443
    command:
      - --providers.docker
      - --providers.docker.network=proxy
      - --providers.docker.exposedByDefault=false
      - --providers.docker.watch
      - --providers.docker.swarmMode=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --certificatesResolvers.le.acme.email=${TRAEFIK_ACME_EMAIL}
      - --certificatesResolvers.le.acme.storage=/certificates/acme.json
      - --certificatesresolvers.le.acme.tlsChallenge=true
      - --api
      - --api.debug=true
      - --api.dashboard=true

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
      labels:
        - traefik.enable=true
        - traefik.docker.network=proxy

        - traefik.http.middlewares.admin-auth.basicauth.users=${TRAEFIK_USER}:${TRAEFIK_HASHED_PASSWORD}

        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true

        - traefik.http.routers.traefik-public-http.rule=Host(`traefik.slatam.com`)
        - traefik.http.routers.traefik-public-http.entrypoints=http
        - traefik.http.routers.traefik-public-http.middlewares=https-redirect

        # traefik-https the actual router using HTTPS
        - traefik.http.routers.traefik-public-https.rule=Host(`traefik.slatam.com`)
        - traefik.http.routers.traefik-public-https.entrypoints=https
        - traefik.http.routers.traefik-public-https.tls=true

        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.traefik-public-https.tls.certresolver=le

        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.traefik-public-https.service=api@internal

        # Enable HTTP Basic auth, using the middleware created above
        - traefik.http.routers.traefik-public-https.middlewares=admin-auth
        
        # Define the port inside of the Docker service to use
        - traefik.http.services.traefik-public-https-service.loadbalancer.server.port=8080
  
        # traefik.http.routers.traefik.middlewares: auth"
        # traefik.http.middlewares.auth.basicauth.users: ${TRAEFIK_USER}:${TRAEFIK_HASHED_PASSWORD}"

  db:
    <<: *default-opts
    image: postgres:12.2
    networks:
      - server
    environment:
      POSTGRES_USER_FILE: /run/secrets/db-user
      POSTGRES_PASSWORD_FILE: /run/secrets/db-password
      POSTGRES_DB_FILE: /run/secrets/db-name
    secrets:
      - db-user
      - db-password
      - db-name
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    # healthcheck:
    #   test: pg_isready -h 127.0.0.1
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

  portainer:
    <<: *default-opts
    image: portainer/portainer
    networks:
      - proxy
    volumes:
      - portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      mode: replicated
      replicas: 1
      placement:
        # place on managers when not using agent, place on workers if using agent
        constraints: [node.role == manager]
      labels:
        - traefik.enable=true
        - traefik.docker.network=proxy
        - traefik.http.routers.portainer-http.rule=Host(`portainer.slatam.com`)
        - traefik.http.routers.portainer-http.entrypoints=http
        - traefik.http.routers.portainer-http.middlewares=https-redirect
        - traefik.http.routers.portainer-https.rule=Host(`portainer.slatam.com`)
        - traefik.http.routers.portainer-https.entrypoints=https
        - traefik.http.routers.portainer-https.tls=true
        - traefik.http.routers.portainer-https.tls.certresolver=le
        - traefik.http.services.portainer-https-service.loadbalancer.server.port=9000


#   plugin-rexray:
#     <<: *default-opts
#     image: mavenugo/swarm-exec:17.03.0-ce
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock
#     secrets:
#       - rexray_do_token
#     environment:
#       - REXRAY_DO_TOKEN_FILE=/run/secrets/rexray_do_token
#     command: sh -c "docker plugin install --grant-all-permissions rexray/dobs DOBS_REGION=nyc3 DOBS_TOKEN=$$(cat $$REXRAY_DO_TOKEN_FILE) DOBS_CONVERTUNDERSCORES=true"
#     deploy:
#       mode: global
#       restart_policy:
#         condition: none

# secrets:
#   rexray_do_token:
#     external: true
#     name: rexray_do_token

secrets:
  db-name:
    file: ./.secrets/db-name
  db-user:
    file: ./.secrets/db-user
  db-password:
    file: ./.secrets/db-password

volumes:
  acme:
  db-data:
  portainer:

networks:
  client:
  server:
  proxy:
    name: proxy
